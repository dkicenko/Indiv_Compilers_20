
// ==========================================================================
//  GPPG error listing for yacc source file <SimpleYacc.y>
// ==========================================================================
//  Version:  1.3.6
//  Machine:  DESKTOP-MQGTEI6
//  DateTime: 17.11.2021 13:57:27
//  UserName: Darya
// ==========================================================================


%{
// Ýòè îáúÿâëåíèÿ äîáàâëÿþòñÿ â êëàññ GPPGParser, ïðåäñòàâëÿþùèé ñîáîé ïàðñåð, ãåíåðèðóåìûé ñèñòåìîé gppg
    public Parser(AbstractScanner<int, LexLocation> scanner) : base(scanner) { }
%}

%output = SimpleYacc.cs

%namespace SimpleParser

%token BEGIN END CYCLE INUM RNUM ID ASSIGN SEMICOLON WHILE DO REPEAT UNTIL FOR TO LBRACKET RBRACKET WRITE
%token IF THEN ELSE VAR COMMA PLUS MINUS MULT DIVISION

%%
// Error: NonTerminal symbol "expr" has no productions
// Warning: NonTerminal symbol "T" is unreachable
// Warning: NonTerminal symbol "F" is unreachable
// Warning: Terminating expr fixes the following size-4 NonTerminal set
   // {assign, cycle, expr, if}
// Error: There are 4 non-terminating NonTerminal Symbols
   //  {assign, cycle, expr, if}
// --------------------------------------------------------------------

progr   : block
		;

stlist	: statement 
		| stlist SEMICOLON statement 
		;

statement: assign
		| block  
		| cycle  
		| WHILE expr DO statement
		| REPEAT stlist UNTIL expr
		| FOR assign TO expr DO statement
		| WRITE LBRACKET expr RBRACKET
		| if
		| VAR var
		;
	expr : T
//^^^
// Error: Syntax error, unexpected ident, expecting "%%", or anchoredSymbol, or EOF
// --------------------------------------------------------------------------------
     | expr PLUS T
     | expr MINUS T
     ;

T    : F
     | T MULT F
     | T DIVISION F
     ;

F    : ident
     | INUM 
     | LBRACKET expr RBRACKET
     ;

if: IF expr THEN statement ELSE statement | IF expr THEN statement;
var: ID | ID COMMA var;

ident 	: ID 
		;
	
assign 	: ident ASSIGN expr 
		;


block	: BEGIN stlist END 
		;

cycle	: CYCLE expr statement 
		;
	
%%
// ==========================================================================

